services:
  # Spring Boot application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    environment:
      SERVER_PORT: 8080
      SPRING_R2DBC_URL: r2dbc:postgresql://db:5432/postgres
      SPRING_R2DBC_USERNAME: postgres
      SPRING_R2DBC_PASSWORD: changemeinprod!
      SPRING_FLYWAY_URL: jdbc:postgresql://db:5432/postgres
      SPRING_FLYWAY_USER: postgres
      SPRING_FLYWAY_PASSWORD: changemeinprod!
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
    depends_on:
      - db
      - redis
    networks:
      - kafka-network
    restart: always

  # PostgreSQL database
  #  db:
  #    image: postgres:latest
  #    ports:
  #      - "5433:5433"`
  #    environment:
  #      POSTGRES_PASSWORD: changemeinprod!
  #      POSTGRES_DB: postgres
  #      POSTGRES_USER: postgres
  #    volumes:
  #      - postgres_data2:/var/lib/postgresql/data
  #    restart: always
  db:
    image: postgres:latest
    ports:
      - "5433:5432"
    command: -p 5433
    environment:
      POSTGRES_PASSWORD: changemeinprod!
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
    volumes:
      - postgres_data2:/var/lib/postgresql/data
    networks:
      - kafka-network
    restart: always

  # Redis
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - kafka-network
    restart: always

networks:
  kafka-network:
    external: true
    name: kafka-network

volumes:
  postgres_data2:
#Before running docker compose, build your application with:
#  ./gradlew bootJar
#Then you can start everything with:
#  docker compose up --build
