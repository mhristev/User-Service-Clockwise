version: "3.8"

services:
  # Spring Boot application
  app:
    build: .
    ports:
      - "8085:8085"
    environment:
      - SPRING_R2DBC_URL=r2dbc:postgresql://db:5433/postgres
      - SPRING_R2DBC_USERNAME=postgres
      - SPRING_R2DBC_PASSWORD=changemeinprod!
      - SPRING_FLYWAY_URL=jdbc:postgresql://db:5433/postgres
      - SPRING_FLYWAY_USER=postgres
      - SPRING_FLYWAY_PASSWORD=changemeinprod!
    depends_on:
      - db
      - kafka
    networks:
      - app-network

  # PostgreSQL database
  db:
    image: postgres:16-alpine
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=changemeinprod!
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.5.1
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    depends_on:
      - zookeeper
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
#Before running docker compose, build your application with:
#  ./gradlew bootJar
#Then you can start everything with:
#  docker compose up --build
